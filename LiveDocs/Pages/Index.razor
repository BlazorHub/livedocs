@page "/{page}"
@implements IAsyncDisposable
@attribute [Authorize]
@using System.Threading
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime Js

<p>LiveDocs @Page Resource Documentation, last rendered @_lastRendered</p>

<StardustDL.RazorComponents.Markdown.MarkdownRenderer Value="@MarkdownText"
                                                      Class="markdown-body" />

@code {
    private HubConnection hubConnection;
    public string MarkdownText = "#### waiting for markdown and data to be rendered...";
    private Timer _timer;
    private IJSObjectReference _scrollInterface;
    private DateTime _lastRendered = DateTime.Now;

    [Parameter]
    public string Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"OnInitializedAsync for {Page}");

        await base.OnInitializedAsync();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/latestmarkdownhub"))
            .Build();

        hubConnection.On<string>("SendLatestMarkdownToInterestedClients", async (newMarkdown) =>
        {
            Console.WriteLine("New markdown received");

            // remember scroll state before updating markdown
            var scrollState = await _scrollInterface.InvokeAsync<System.Drawing.Point>("getScroll");
            Console.WriteLine(scrollState);

            // update markdown
            MarkdownText = newMarkdown;
            _lastRendered = DateTime.Now;
            StateHasChanged();

            // set scroll state to same as before updating markdown
            await _scrollInterface.InvokeVoidAsync("setScroll", scrollState.X, scrollState.Y);
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("SelectResource", Page);
        Console.WriteLine($"SelectResource called for {Page}");
    }

    protected override async Task OnParametersSetAsync()
    {
        await hubConnection.SendAsync("SelectResource", Page);
        Console.WriteLine($"SelectResource called for {Page}");

        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _scrollInterface = await Js.InvokeAsync<IJSObjectReference>("import", "./scroll-interface.js");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_scrollInterface is not null)
        {
            await _scrollInterface.DisposeAsync();
        }
    }
}


