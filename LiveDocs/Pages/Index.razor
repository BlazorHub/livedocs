@page "/{page}"
@implements IAsyncDisposable
@attribute [Authorize]
@using System.Threading
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject IJSRuntime Js

<p>LiveDocs @Page Resource Documentation, last rendered @_lastRendered</p>

<StardustDL.RazorComponents.Markdown.MarkdownRenderer 
    Value="@MarkdownText" 
    Class="markdown-body"
    />

@code {
    public string MarkdownText = "#### waiting for markdown and data to be rendered...";
    private Timer _timer;
    private IJSObjectReference _scrollInterface;
    private DateTime _lastRendered = DateTime.Now;

    [Parameter]
    public string Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _timer = new Timer(async (object stateInfo) =>
        {
            // fetch new markdown, takes a while if replacements have expired
            var newMarkdown = await FetchMarkdown();

            // remember scroll state before updating markdown
            var scrollState = await _scrollInterface.InvokeAsync<System.Drawing.Point>("getScroll");
            Console.WriteLine(scrollState);

            // update markdown
            MarkdownText = newMarkdown;
            StateHasChanged();
            
            // set scrollstate to same as before updating markdown
            await _scrollInterface.InvokeVoidAsync("setScroll", scrollState.X, scrollState.Y);
            
        }, new AutoResetEvent(false), 5500, 15000);
    }

    public async Task<string> FetchMarkdown()
    {
        var response = await Http.GetFromJsonAsync<GetLiveDocsResponse>("api/v1/livedocs/" + Page);
        _lastRendered = DateTime.Now;
        return response.Markdown;
    }

    public class GetLiveDocsResponse
    {
        public string Markdown { get; init; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _scrollInterface = await Js.InvokeAsync<IJSObjectReference>("import", "./scroll-interface.js");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_scrollInterface is not null)
        {
            await _scrollInterface.DisposeAsync();
        }
    }
}


