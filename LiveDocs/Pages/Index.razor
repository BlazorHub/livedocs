@page "/{page}"
@implements IAsyncDisposable
@attribute [Authorize]
@using System.Threading
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject IJSRuntime JS

<p>LiveDocs index page</p>

<StardustDL.RazorComponents.Markdown.MarkdownRenderer Value="@MarkdownText" />

@code {
    public string MarkdownText = "#### waiting for markdown and data to be rendered...";
    private Timer _timer;
    private IJSObjectReference _scrollInterface;

    [Parameter]
    public string Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _timer = new Timer(async (object stateInfo) =>
        {
            var scrollState = await _scrollInterface.InvokeAsync<System.Drawing.Point>("getScroll");
            MarkdownText = await FetchMarkdown();
            StateHasChanged();
            await _scrollInterface.InvokeVoidAsync("setScroll", scrollState.X, scrollState.Y);
        }, new AutoResetEvent(false), 5500, 5000);
    }

    public async Task<string> FetchMarkdown()
    {
        var response = await Http.GetFromJsonAsync<GetLiveDocsResponse>("api/v1/livedocs/" + Page);
        return response.Markdown;
    }

    public class GetLiveDocsResponse
    {
        public string Markdown { get; init; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _scrollInterface = await JS.InvokeAsync<IJSObjectReference>("import", "./scroll-interface.js");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_scrollInterface is not null)
        {
            await _scrollInterface.DisposeAsync();
        }
    }
}


